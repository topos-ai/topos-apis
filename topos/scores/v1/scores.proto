syntax = "proto3";

package topos.scores.v1;

import "google/api/annotations.proto";

option go_package = "github.com/topos-ai/topos-apis/genproto/go/topos/scores/v1;scores";

service Scores {
  // Gets a graph score.
  rpc GetGraphScore(GetGraphScoreRequest) returns (Score) {
    option (google.api.http) = {
      get : "/v1/{name=graphs/*}/scores"
    };
  }

  // Gets graph scores in descending order by score value.
  rpc TopGraphScores(TopGraphScoresRequest) returns (TopGraphScoresResponse) {
    option (google.api.http) = {
      get : "/v1/{name=graphs/*}/scores:top"
    };
  }
}

message Score {
  // The [resource name](https://cloud.google.com/apis/design/resource_names) of
  // the origin vertex. It must match the [regular
  // expression](https://github.com/google/re2/wiki/Syntax)
  // `^[\w-]+(/[\w-]+)*$`.
  string vertex_a = 1;

  // The [resource name](https://cloud.google.com/apis/design/resource_names) of
  // the destination vertex. It must match the [regular
  // expression](https://github.com/google/re2/wiki/Syntax)
  // `^[\w-]+(/[\w-]+)*$`.
  string vertex_b = 2;

  // The score value.
  double score = 3;
}

message GetGraphScoreRequest {
  // The name of the graph.
  string name = 1;

  // The resource name of the origin vertex.
  string vertex_a = 2;

  // The resource name of the destination vertex.
  string vertex_b = 3;
}

message TopGraphScoresRequest {
  // The name of the graph. It must have the format `"graphs/{graph}"`.
  // `{graphs}` must match the [regular
  // expression](https://github.com/google/re2/wiki/Syntax)
  // `^[a-z\d]+([.-][a-z\d]+)*$`.
  string name = 1;

  // The maximum number of items to return.
  int32 page_size = 2;

  // The resource name of the origin vertex.
  string vertex_a = 3;

  // The resource name of the destination vertex.
  string vertex_b = 4;

  // Return the scores in ascending order by score value.
  bool ascending_order = 5;

  // If any are specified, only return scores where the name of vertex
  // unspecified in the query is one of the filter values.
  repeated string vertex_filters = 6;
}

message TopGraphScoresResponse { repeated Score scores = 1; }
