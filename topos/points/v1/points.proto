syntax = "proto3";

package topos.points.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service Points {

    // Gets a brand.
    rpc GetBrand(GetBrandRequest) returns (Brand) {
        option (google.api.http) = {
            get: "/v1/{name=brands/*}"
        };
    }
    
    // Creates a brand.
    rpc CreateBrand(CreateBrandRequest) returns (Brand) {
        option (google.api.http) = {
            post: "/v1/brands"
            body: "brand"
        };
    }

    // Updates the value of an existing brand.
    rpc UpdateBrand(UpdateBrandRequest) returns (Brand) {
        option (google.api.http) = {
            put: "/v1/{brand.name=brands/*}"
            body: "brand"
        };
    }
    
    // Deletes a brand.
    rpc DeleteBrand(DeleteBrandRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=brands/*}"
        };
    }

    // Gets a point.
    rpc GetPoint(GetPointRequest) returns (Point) {
        option (google.api.http) = {
            get: "/v1/{name=points/*}"
        };
    }
    
    // Updates the value of an existing point.
    rpc UpdatePoint(UpdatePointRequest) returns (Point) {
        option (google.api.http) = {
            put: "/v1/{point.name=points/*}"
            body: "point"
        };
    }
    
    // Deletes a point.
    rpc DeletePoint(DeletePointRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=points/*}"
        };
    }

    // Gets a point source.
    rpc GetPointSource(GetPointSourceRequest) returns (PointSource) {
        option (google.api.http) = {
            get: "/v1/{name=sources/*/point_sources/*}"
        };
    }
    
    // Creates a point source.
    rpc CreatePointSource(CreatePointSourceRequest) returns (PointSource) {
        option (google.api.http) = {
            post: "/v1/{source=sources/*}/point_sources"
            body: "point_source"
        };
    }

    // Updates the value of an existing point source.
    rpc UpdatePointSource(UpdatePointSourceRequest) returns (PointSource) {
        option (google.api.http) = {
            put: "/v1/{point_source.name=sources/*/point_sources/*}"
            body: "point_source"
        };
    }
    
    // Deletes a point source.
    rpc DeletePointSource(DeletePointSourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=sources/*/point_sources/*}"
        };
    }

    // Associates point sources with a point.
    rpc LinkPointSource(LinkPointSourceRequest) returns (Point) {
        option (google.api.http) = {
            post: "/v1/{name=sources/*/point_sources/*}:link"
            body: "*"
        };
    }
}

message Brand {
    // The name of the point brand. It must have the format `"brands/{brand}"`.
    // {brand} must be the string representation of a v4 UUID.
    string name = 1;

    // The display name of the brand.
    string display_name = 2;

    // The creation timestamp of the brand.
    google.protobuf.Timestamp create_time = 3;

    // The last update timestamp of an brand.
    google.protobuf.Timestamp update_time = 4;
}

message LatLng {
    double latitude = 1;
    double longitude = 2;
}

message Point {
    // The name of the point. It must have the format `"points/{point}"`.
    // {point} must be the string representation of a v4 UUID.
    string name = 1;

    // The name of the point's brand if it has one. It must have the format
    // `"brands/{brand}"`. {brand} must be the string representation of a v4
    // UUID.
    string brand = 2;

    // The display name of the point.
    string display_name = 3;

    // The formatted, single-line address.
    string formatted_address = 4;

    // The geocoded point address.
    LatLng location = 5;

    // The creation timestamp of the point.
    google.protobuf.Timestamp create_time = 6;

    // The last update timestamp of an point.
    google.protobuf.Timestamp update_time = 7;
}

message PointSource {
    // The name of the point source. It must have the format
    // `"sources/{source}/point_sources/{point_source}"`. `{source}` must match
    // the [regular expression](https://github.com/google/re2/wiki/Syntax)
    // `^[a-z\d]+(-[a-z\d]+)*$`. {point_source} is the remote point source ID.
    string name = 1;

    // The name of the point associated with this point source if there is one.
    // It must have the format `"points/{point}"`. {point} must be the string
    // representation of a v4 UUID.
    string point = 2;

    // The display name of the point source.
    string display_name = 3;

    // The formatted, single-line address.
    string formatted_address = 4;

    // The source-geocoded address.
    LatLng location = 5;

    // A list of potentially unnormalized, source-provided tags.
    repeated string tags = 6;

    // The creation timestamp of the point source.
    google.protobuf.Timestamp create_time = 7;

    // The last update timestamp of an point source.
    google.protobuf.Timestamp update_time = 8;
}

message GetBrandRequest {
    string name = 1;
}

message CreateBrandRequest {
    Brand brand = 1;
}

message UpdateBrandRequest {
    Brand brand = 1;
}

message DeleteBrandRequest {
    string name = 1;
}

message GetPointRequest {
    string name = 1;
}

message CreatePointRequest {
    Point point = 1;
}

message UpdatePointRequest {
    Point point = 1;
}

message DeletePointRequest {
    string name = 1;
}

message GetPointSourceRequest {
    string name = 1;
}

message CreatePointSourceRequest {
    string source = 1;
    PointSource point_source = 2;
}

message UpdatePointSourceRequest {
    PointSource point_source = 1;
}

message DeletePointSourceRequest {
    string name = 1;
}

message LinkPointSourceRequest {
    string name = 1;
    string point_source = 2;
}