syntax = "proto3";

package topos.points.v1;

import "google/api/annotations.proto";
import "topos/geometry/encoding.proto";
import "topos/geometry/latlng.proto";

option go_package = "github.com/topos-ai/topos-apis/genproto/go/topos/points/v1;points";

service Points {
  // Gets a point.
  rpc GetPoint(GetPointRequest) returns (Point) {
    option (google.api.http) = {
      get : "/v1/{name=points/*}"
    };
  }

  // Search points.
  rpc SearchPoints(SearchPointsRequest) returns (SearchPointsResponse) {
    option (google.api.http) = {
      get : "/v1/points:search"
    };
  }

  // Search points.
  rpc PolygonSearchPoints(stream PolygonSearchPointsRequest)
      returns (PolygonSearchPointsResponse) {
    option (google.api.http) = {
      post : "/v1/points:polygon_search"
      body : "*"
    };
  }

  // Search points.
  rpc RadiusSearchPoints(RadiusSearchPointsRequest)
      returns (RadiusSearchPointsResponse) {
    option (google.api.http) = {
      get : "/v1/points:radius_search"
    };
  }

  rpc CountBrandPoints(CountBrandPointsRequest)
      returns (CountBrandPointsResponse) {
    option (google.api.http) = {
      get : "/v1/brands:count"
    };
  }

  rpc PolygonCountBrandPoints(stream PolygonCountBrandPointsRequest)
      returns (PolygonCountBrandPointsResponse) {
    option (google.api.http) = {
      post : "/v1/brands:polygon_count"
      body : "*"
    };
  }

  rpc CountTagPoints(CountTagPointsRequest) returns (CountTagPointsResponse) {
    option (google.api.http) = {
      get : "/v1/tags:count"
    };
  }

  rpc PolygonCountTagPoints(stream PolygonCountTagPointsRequest)
      returns (PolygonCountTagPointsResponse) {
    option (google.api.http) = {
      post : "/v1/tags:polygon_count"
      body : "*"
    };
  }
}

message Point {
  // The name of the point. It must have the format `"points/{point}"`.
  string name = 1;

  // The display name of the point.
  string display_name = 2;

  // The geocoded point address.
  topos.geometry.LatLng location = 4;

  // The formatted, single-line address.
  string formatted_address = 5;

  // The name of the point's brand if it has one.
  string brand = 7;

  // A list of point tags.
  repeated string tags = 8;

  // Count of points with this point's brand.
  int64 location_count = 9;
}

message GetPointRequest { string name = 1; }

message SearchPointsRequest {
  // The maximum number of items to return.
  int32 page_size = 1;

  // The next_page_token value returned from a previous Search request, if any.
  string page_token = 2;

  // Return points with a given brand.
  string brand = 3;

  // Return points with the given tags.
  repeated string tags = 4;

  // Return points within the given region.
  string region = 5;
}

message SearchPointsResponse {
  repeated Point points = 1;

  // Token to retrieve the next page of results, or empty if there are no more
  // results in the search.
  string next_page_token = 2;
}

message PolygonSearchPointsRequest {
  // The maximum number of items to return.
  int32 page_size = 1;

  // The next_page_token value returned from a previous search request, if any.
  string page_token = 2;

  // Return points with a given brand.
  string brand = 3;

  // Return points with the given tags.
  repeated string tags = 4;

  // The geometry data's encoding.
  topos.geometry.Encoding geometry_encoding = 5;

  // A chunk of bytes of the encoded geometry.
  bytes geometry_chunk = 15;
}

message PolygonSearchPointsResponse {
  repeated Point points = 1;

  // Token to retrieve the next page of results, or empty if there are no more
  // results in the search.
  string next_page_token = 2;
}

message RadiusSearchPointsRequest {
  // The maximum number of items to return.
  int32 page_size = 1;

  // The next_page_token value returned from a previous search request, if any.
  string page_token = 2;

  // Return points with the given brands.
  repeated string brands = 3;

  // Return points with the given tags.
  repeated string tags = 4;

  // The center of the area inclosed by the radius.
  topos.geometry.LatLng center = 5;

  // A radius in meters.
  double radius = 6;
}

message RadiusSearchPointsResponse {
  repeated Point points = 1;

  // Token to retrieve the next page of results, or empty if there are no more
  // results in the search.
  string next_page_token = 2;
}

message CountBrandPointsRequest {
  // Count brand points within this region.
  string region = 1;

  // Count points for the given brands.
  repeated string brands = 2;
}

message CountBrandPointsResponse {
  // Map of brand IDs to point counts.
  map<string, int64> brand_points = 1;
}

message PolygonCountBrandPointsRequest {
  // Count brand points within this region.
  string region = 1;

  // Count points for the given brands.
  repeated string brands = 2;

  // The polygon data's encoding.
  topos.geometry.Encoding geometry_encoding = 3;

  // A chunk of bytes of the encoded S2 polygon.
  bytes geometry_chunk = 15;
}

message PolygonCountBrandPointsResponse {
  // Map of brand IDs to point counts.
  map<string, int64> brand_points = 1;
}

message CountTagPointsRequest {
  // Count brand points within this region.
  string region = 1;

  // Count points for the given tags.
  repeated string tags = 2;
}

message CountTagPointsResponse {
  // Map of tag IDs to point counts.
  map<string, int64> tag_points = 1;
}

message PolygonCountTagPointsRequest {
  // Count brand points within this region.
  string region = 1;

  // Count points for the given tags.
  repeated string tags = 2;

  // The polygon data's encoding.
  topos.geometry.Encoding geometry_encoding = 3;

  // A chunk of bytes of the encoded polygon.
  bytes geometry_chunk = 15;
}

message PolygonCountTagPointsResponse {
  // Map of tag IDs to point counts.
  map<string, int64> tag_points = 1;
}
