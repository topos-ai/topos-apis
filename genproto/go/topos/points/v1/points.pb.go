// Code generated by protoc-gen-go. DO NOT EDIT.
// source: topos/points/v1/points.proto

package points

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	geometry "github.com/topos-ai/topos-apis/genproto/go/topos/geometry"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Point struct {
	// The name of the point. It must have the format `"points/{point}"`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The display name of the point.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The geocoded point address.
	Location *geometry.LatLng `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	// The formatted, single-line address.
	FormattedAddress string `protobuf:"bytes,5,opt,name=formatted_address,json=formattedAddress,proto3" json:"formatted_address,omitempty"`
	// The name of the point's brand if it has one.
	Brand string `protobuf:"bytes,7,opt,name=brand,proto3" json:"brand,omitempty"`
	// A list of point tags.
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// Count of points with this point's brand.
	LocationCount        int64    `protobuf:"varint,9,opt,name=location_count,json=locationCount,proto3" json:"location_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_58bd33bd76af5b35, []int{0}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Point) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Point) GetLocation() *geometry.LatLng {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Point) GetFormattedAddress() string {
	if m != nil {
		return m.FormattedAddress
	}
	return ""
}

func (m *Point) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *Point) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Point) GetLocationCount() int64 {
	if m != nil {
		return m.LocationCount
	}
	return 0
}

type GetPointRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPointRequest) Reset()         { *m = GetPointRequest{} }
func (m *GetPointRequest) String() string { return proto.CompactTextString(m) }
func (*GetPointRequest) ProtoMessage()    {}
func (*GetPointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_58bd33bd76af5b35, []int{1}
}

func (m *GetPointRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPointRequest.Unmarshal(m, b)
}
func (m *GetPointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPointRequest.Marshal(b, m, deterministic)
}
func (m *GetPointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPointRequest.Merge(m, src)
}
func (m *GetPointRequest) XXX_Size() int {
	return xxx_messageInfo_GetPointRequest.Size(m)
}
func (m *GetPointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPointRequest proto.InternalMessageInfo

func (m *GetPointRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SearchPointsRequest struct {
	// The maximum number of items to return.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous Search request, if any.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Return points with a given brand.
	Brand string `protobuf:"bytes,3,opt,name=brand,proto3" json:"brand,omitempty"`
	// Return points with the given tags.
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// Return points within the given region.
	Region               string   `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchPointsRequest) Reset()         { *m = SearchPointsRequest{} }
func (m *SearchPointsRequest) String() string { return proto.CompactTextString(m) }
func (*SearchPointsRequest) ProtoMessage()    {}
func (*SearchPointsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_58bd33bd76af5b35, []int{2}
}

func (m *SearchPointsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchPointsRequest.Unmarshal(m, b)
}
func (m *SearchPointsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchPointsRequest.Marshal(b, m, deterministic)
}
func (m *SearchPointsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchPointsRequest.Merge(m, src)
}
func (m *SearchPointsRequest) XXX_Size() int {
	return xxx_messageInfo_SearchPointsRequest.Size(m)
}
func (m *SearchPointsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchPointsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchPointsRequest proto.InternalMessageInfo

func (m *SearchPointsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *SearchPointsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *SearchPointsRequest) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *SearchPointsRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SearchPointsRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type SearchPointsResponse struct {
	Points []*Point `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	// Token to retrieve the next page of results, or empty if there are no more
	// results in the search.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchPointsResponse) Reset()         { *m = SearchPointsResponse{} }
func (m *SearchPointsResponse) String() string { return proto.CompactTextString(m) }
func (*SearchPointsResponse) ProtoMessage()    {}
func (*SearchPointsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58bd33bd76af5b35, []int{3}
}

func (m *SearchPointsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchPointsResponse.Unmarshal(m, b)
}
func (m *SearchPointsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchPointsResponse.Marshal(b, m, deterministic)
}
func (m *SearchPointsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchPointsResponse.Merge(m, src)
}
func (m *SearchPointsResponse) XXX_Size() int {
	return xxx_messageInfo_SearchPointsResponse.Size(m)
}
func (m *SearchPointsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchPointsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchPointsResponse proto.InternalMessageInfo

func (m *SearchPointsResponse) GetPoints() []*Point {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *SearchPointsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type PolygonSearchPointsRequest struct {
	// The maximum number of items to return.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous search request, if any.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Return points with a given brand.
	Brand string `protobuf:"bytes,3,opt,name=brand,proto3" json:"brand,omitempty"`
	// Return points with the given tags.
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// The geometry data's encoding.
	GeometryEncoding geometry.Encoding `protobuf:"varint,5,opt,name=geometry_encoding,json=geometryEncoding,proto3,enum=topos.geometry.Encoding" json:"geometry_encoding,omitempty"`
	// A chunk of bytes of the encoded geometry.
	GeometryChunk        []byte   `protobuf:"bytes,15,opt,name=geometry_chunk,json=geometryChunk,proto3" json:"geometry_chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolygonSearchPointsRequest) Reset()         { *m = PolygonSearchPointsRequest{} }
func (m *PolygonSearchPointsRequest) String() string { return proto.CompactTextString(m) }
func (*PolygonSearchPointsRequest) ProtoMessage()    {}
func (*PolygonSearchPointsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_58bd33bd76af5b35, []int{4}
}

func (m *PolygonSearchPointsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolygonSearchPointsRequest.Unmarshal(m, b)
}
func (m *PolygonSearchPointsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolygonSearchPointsRequest.Marshal(b, m, deterministic)
}
func (m *PolygonSearchPointsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolygonSearchPointsRequest.Merge(m, src)
}
func (m *PolygonSearchPointsRequest) XXX_Size() int {
	return xxx_messageInfo_PolygonSearchPointsRequest.Size(m)
}
func (m *PolygonSearchPointsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PolygonSearchPointsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PolygonSearchPointsRequest proto.InternalMessageInfo

func (m *PolygonSearchPointsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PolygonSearchPointsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *PolygonSearchPointsRequest) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *PolygonSearchPointsRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *PolygonSearchPointsRequest) GetGeometryEncoding() geometry.Encoding {
	if m != nil {
		return m.GeometryEncoding
	}
	return geometry.Encoding_WKB
}

func (m *PolygonSearchPointsRequest) GetGeometryChunk() []byte {
	if m != nil {
		return m.GeometryChunk
	}
	return nil
}

type PolygonSearchPointsResponse struct {
	Points []*Point `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	// Token to retrieve the next page of results, or empty if there are no more
	// results in the search.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolygonSearchPointsResponse) Reset()         { *m = PolygonSearchPointsResponse{} }
func (m *PolygonSearchPointsResponse) String() string { return proto.CompactTextString(m) }
func (*PolygonSearchPointsResponse) ProtoMessage()    {}
func (*PolygonSearchPointsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58bd33bd76af5b35, []int{5}
}

func (m *PolygonSearchPointsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolygonSearchPointsResponse.Unmarshal(m, b)
}
func (m *PolygonSearchPointsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolygonSearchPointsResponse.Marshal(b, m, deterministic)
}
func (m *PolygonSearchPointsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolygonSearchPointsResponse.Merge(m, src)
}
func (m *PolygonSearchPointsResponse) XXX_Size() int {
	return xxx_messageInfo_PolygonSearchPointsResponse.Size(m)
}
func (m *PolygonSearchPointsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PolygonSearchPointsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PolygonSearchPointsResponse proto.InternalMessageInfo

func (m *PolygonSearchPointsResponse) GetPoints() []*Point {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *PolygonSearchPointsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type RadiusSearchPointsRequest struct {
	// The maximum number of items to return.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous search request, if any.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Return points with the given brands.
	Brands []string `protobuf:"bytes,3,rep,name=brands,proto3" json:"brands,omitempty"`
	// Return points with the given tags.
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// The center of the area inclosed by the radius.
	Center *geometry.LatLng `protobuf:"bytes,5,opt,name=center,proto3" json:"center,omitempty"`
	// A radius in meters.
	Radius               float64  `protobuf:"fixed64,6,opt,name=radius,proto3" json:"radius,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RadiusSearchPointsRequest) Reset()         { *m = RadiusSearchPointsRequest{} }
func (m *RadiusSearchPointsRequest) String() string { return proto.CompactTextString(m) }
func (*RadiusSearchPointsRequest) ProtoMessage()    {}
func (*RadiusSearchPointsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_58bd33bd76af5b35, []int{6}
}

func (m *RadiusSearchPointsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RadiusSearchPointsRequest.Unmarshal(m, b)
}
func (m *RadiusSearchPointsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RadiusSearchPointsRequest.Marshal(b, m, deterministic)
}
func (m *RadiusSearchPointsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RadiusSearchPointsRequest.Merge(m, src)
}
func (m *RadiusSearchPointsRequest) XXX_Size() int {
	return xxx_messageInfo_RadiusSearchPointsRequest.Size(m)
}
func (m *RadiusSearchPointsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RadiusSearchPointsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RadiusSearchPointsRequest proto.InternalMessageInfo

func (m *RadiusSearchPointsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *RadiusSearchPointsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *RadiusSearchPointsRequest) GetBrands() []string {
	if m != nil {
		return m.Brands
	}
	return nil
}

func (m *RadiusSearchPointsRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *RadiusSearchPointsRequest) GetCenter() *geometry.LatLng {
	if m != nil {
		return m.Center
	}
	return nil
}

func (m *RadiusSearchPointsRequest) GetRadius() float64 {
	if m != nil {
		return m.Radius
	}
	return 0
}

type RadiusSearchPointsResponse struct {
	Points []*Point `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	// Token to retrieve the next page of results, or empty if there are no more
	// results in the search.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RadiusSearchPointsResponse) Reset()         { *m = RadiusSearchPointsResponse{} }
func (m *RadiusSearchPointsResponse) String() string { return proto.CompactTextString(m) }
func (*RadiusSearchPointsResponse) ProtoMessage()    {}
func (*RadiusSearchPointsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58bd33bd76af5b35, []int{7}
}

func (m *RadiusSearchPointsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RadiusSearchPointsResponse.Unmarshal(m, b)
}
func (m *RadiusSearchPointsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RadiusSearchPointsResponse.Marshal(b, m, deterministic)
}
func (m *RadiusSearchPointsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RadiusSearchPointsResponse.Merge(m, src)
}
func (m *RadiusSearchPointsResponse) XXX_Size() int {
	return xxx_messageInfo_RadiusSearchPointsResponse.Size(m)
}
func (m *RadiusSearchPointsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RadiusSearchPointsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RadiusSearchPointsResponse proto.InternalMessageInfo

func (m *RadiusSearchPointsResponse) GetPoints() []*Point {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *RadiusSearchPointsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type CountBrandPointsRequest struct {
	// Count brand points within this region.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// Count points for the given brands.
	Brands               []string `protobuf:"bytes,2,rep,name=brands,proto3" json:"brands,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountBrandPointsRequest) Reset()         { *m = CountBrandPointsRequest{} }
func (m *CountBrandPointsRequest) String() string { return proto.CompactTextString(m) }
func (*CountBrandPointsRequest) ProtoMessage()    {}
func (*CountBrandPointsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_58bd33bd76af5b35, []int{8}
}

func (m *CountBrandPointsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountBrandPointsRequest.Unmarshal(m, b)
}
func (m *CountBrandPointsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountBrandPointsRequest.Marshal(b, m, deterministic)
}
func (m *CountBrandPointsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountBrandPointsRequest.Merge(m, src)
}
func (m *CountBrandPointsRequest) XXX_Size() int {
	return xxx_messageInfo_CountBrandPointsRequest.Size(m)
}
func (m *CountBrandPointsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountBrandPointsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountBrandPointsRequest proto.InternalMessageInfo

func (m *CountBrandPointsRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *CountBrandPointsRequest) GetBrands() []string {
	if m != nil {
		return m.Brands
	}
	return nil
}

type CountBrandPointsResponse struct {
	// Map of brand IDs to point counts.
	BrandPoints          map[string]int64 `protobuf:"bytes,1,rep,name=brand_points,json=brandPoints,proto3" json:"brand_points,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CountBrandPointsResponse) Reset()         { *m = CountBrandPointsResponse{} }
func (m *CountBrandPointsResponse) String() string { return proto.CompactTextString(m) }
func (*CountBrandPointsResponse) ProtoMessage()    {}
func (*CountBrandPointsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58bd33bd76af5b35, []int{9}
}

func (m *CountBrandPointsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountBrandPointsResponse.Unmarshal(m, b)
}
func (m *CountBrandPointsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountBrandPointsResponse.Marshal(b, m, deterministic)
}
func (m *CountBrandPointsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountBrandPointsResponse.Merge(m, src)
}
func (m *CountBrandPointsResponse) XXX_Size() int {
	return xxx_messageInfo_CountBrandPointsResponse.Size(m)
}
func (m *CountBrandPointsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountBrandPointsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountBrandPointsResponse proto.InternalMessageInfo

func (m *CountBrandPointsResponse) GetBrandPoints() map[string]int64 {
	if m != nil {
		return m.BrandPoints
	}
	return nil
}

type PolygonCountBrandPointsRequest struct {
	// Count brand points within this region.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// Count points for the given brands.
	Brands []string `protobuf:"bytes,2,rep,name=brands,proto3" json:"brands,omitempty"`
	// The polygon data's encoding.
	GeometryEncoding geometry.Encoding `protobuf:"varint,3,opt,name=geometry_encoding,json=geometryEncoding,proto3,enum=topos.geometry.Encoding" json:"geometry_encoding,omitempty"`
	// A chunk of bytes of the encoded S2 polygon.
	GeometryChunk        []byte   `protobuf:"bytes,15,opt,name=geometry_chunk,json=geometryChunk,proto3" json:"geometry_chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolygonCountBrandPointsRequest) Reset()         { *m = PolygonCountBrandPointsRequest{} }
func (m *PolygonCountBrandPointsRequest) String() string { return proto.CompactTextString(m) }
func (*PolygonCountBrandPointsRequest) ProtoMessage()    {}
func (*PolygonCountBrandPointsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_58bd33bd76af5b35, []int{10}
}

func (m *PolygonCountBrandPointsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolygonCountBrandPointsRequest.Unmarshal(m, b)
}
func (m *PolygonCountBrandPointsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolygonCountBrandPointsRequest.Marshal(b, m, deterministic)
}
func (m *PolygonCountBrandPointsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolygonCountBrandPointsRequest.Merge(m, src)
}
func (m *PolygonCountBrandPointsRequest) XXX_Size() int {
	return xxx_messageInfo_PolygonCountBrandPointsRequest.Size(m)
}
func (m *PolygonCountBrandPointsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PolygonCountBrandPointsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PolygonCountBrandPointsRequest proto.InternalMessageInfo

func (m *PolygonCountBrandPointsRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *PolygonCountBrandPointsRequest) GetBrands() []string {
	if m != nil {
		return m.Brands
	}
	return nil
}

func (m *PolygonCountBrandPointsRequest) GetGeometryEncoding() geometry.Encoding {
	if m != nil {
		return m.GeometryEncoding
	}
	return geometry.Encoding_WKB
}

func (m *PolygonCountBrandPointsRequest) GetGeometryChunk() []byte {
	if m != nil {
		return m.GeometryChunk
	}
	return nil
}

type PolygonCountBrandPointsResponse struct {
	// Map of brand IDs to point counts.
	BrandPoints          map[string]int64 `protobuf:"bytes,1,rep,name=brand_points,json=brandPoints,proto3" json:"brand_points,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PolygonCountBrandPointsResponse) Reset()         { *m = PolygonCountBrandPointsResponse{} }
func (m *PolygonCountBrandPointsResponse) String() string { return proto.CompactTextString(m) }
func (*PolygonCountBrandPointsResponse) ProtoMessage()    {}
func (*PolygonCountBrandPointsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58bd33bd76af5b35, []int{11}
}

func (m *PolygonCountBrandPointsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolygonCountBrandPointsResponse.Unmarshal(m, b)
}
func (m *PolygonCountBrandPointsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolygonCountBrandPointsResponse.Marshal(b, m, deterministic)
}
func (m *PolygonCountBrandPointsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolygonCountBrandPointsResponse.Merge(m, src)
}
func (m *PolygonCountBrandPointsResponse) XXX_Size() int {
	return xxx_messageInfo_PolygonCountBrandPointsResponse.Size(m)
}
func (m *PolygonCountBrandPointsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PolygonCountBrandPointsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PolygonCountBrandPointsResponse proto.InternalMessageInfo

func (m *PolygonCountBrandPointsResponse) GetBrandPoints() map[string]int64 {
	if m != nil {
		return m.BrandPoints
	}
	return nil
}

type CountTagPointsRequest struct {
	// Count brand points within this region.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// Count points for the given tags.
	Tags                 []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountTagPointsRequest) Reset()         { *m = CountTagPointsRequest{} }
func (m *CountTagPointsRequest) String() string { return proto.CompactTextString(m) }
func (*CountTagPointsRequest) ProtoMessage()    {}
func (*CountTagPointsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_58bd33bd76af5b35, []int{12}
}

func (m *CountTagPointsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountTagPointsRequest.Unmarshal(m, b)
}
func (m *CountTagPointsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountTagPointsRequest.Marshal(b, m, deterministic)
}
func (m *CountTagPointsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountTagPointsRequest.Merge(m, src)
}
func (m *CountTagPointsRequest) XXX_Size() int {
	return xxx_messageInfo_CountTagPointsRequest.Size(m)
}
func (m *CountTagPointsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountTagPointsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountTagPointsRequest proto.InternalMessageInfo

func (m *CountTagPointsRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *CountTagPointsRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type CountTagPointsResponse struct {
	// Map of tag IDs to point counts.
	TagPoints            map[string]int64 `protobuf:"bytes,1,rep,name=tag_points,json=tagPoints,proto3" json:"tag_points,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CountTagPointsResponse) Reset()         { *m = CountTagPointsResponse{} }
func (m *CountTagPointsResponse) String() string { return proto.CompactTextString(m) }
func (*CountTagPointsResponse) ProtoMessage()    {}
func (*CountTagPointsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58bd33bd76af5b35, []int{13}
}

func (m *CountTagPointsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountTagPointsResponse.Unmarshal(m, b)
}
func (m *CountTagPointsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountTagPointsResponse.Marshal(b, m, deterministic)
}
func (m *CountTagPointsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountTagPointsResponse.Merge(m, src)
}
func (m *CountTagPointsResponse) XXX_Size() int {
	return xxx_messageInfo_CountTagPointsResponse.Size(m)
}
func (m *CountTagPointsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountTagPointsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountTagPointsResponse proto.InternalMessageInfo

func (m *CountTagPointsResponse) GetTagPoints() map[string]int64 {
	if m != nil {
		return m.TagPoints
	}
	return nil
}

type PolygonCountTagPointsRequest struct {
	// Count brand points within this region.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// Count points for the given tags.
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	// The polygon data's encoding.
	GeometryEncoding geometry.Encoding `protobuf:"varint,3,opt,name=geometry_encoding,json=geometryEncoding,proto3,enum=topos.geometry.Encoding" json:"geometry_encoding,omitempty"`
	// A chunk of bytes of the encoded polygon.
	GeometryChunk        []byte   `protobuf:"bytes,15,opt,name=geometry_chunk,json=geometryChunk,proto3" json:"geometry_chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolygonCountTagPointsRequest) Reset()         { *m = PolygonCountTagPointsRequest{} }
func (m *PolygonCountTagPointsRequest) String() string { return proto.CompactTextString(m) }
func (*PolygonCountTagPointsRequest) ProtoMessage()    {}
func (*PolygonCountTagPointsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_58bd33bd76af5b35, []int{14}
}

func (m *PolygonCountTagPointsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolygonCountTagPointsRequest.Unmarshal(m, b)
}
func (m *PolygonCountTagPointsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolygonCountTagPointsRequest.Marshal(b, m, deterministic)
}
func (m *PolygonCountTagPointsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolygonCountTagPointsRequest.Merge(m, src)
}
func (m *PolygonCountTagPointsRequest) XXX_Size() int {
	return xxx_messageInfo_PolygonCountTagPointsRequest.Size(m)
}
func (m *PolygonCountTagPointsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PolygonCountTagPointsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PolygonCountTagPointsRequest proto.InternalMessageInfo

func (m *PolygonCountTagPointsRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *PolygonCountTagPointsRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *PolygonCountTagPointsRequest) GetGeometryEncoding() geometry.Encoding {
	if m != nil {
		return m.GeometryEncoding
	}
	return geometry.Encoding_WKB
}

func (m *PolygonCountTagPointsRequest) GetGeometryChunk() []byte {
	if m != nil {
		return m.GeometryChunk
	}
	return nil
}

type PolygonCountTagPointsResponse struct {
	// Map of tag IDs to point counts.
	TagPoints            map[string]int64 `protobuf:"bytes,1,rep,name=tag_points,json=tagPoints,proto3" json:"tag_points,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PolygonCountTagPointsResponse) Reset()         { *m = PolygonCountTagPointsResponse{} }
func (m *PolygonCountTagPointsResponse) String() string { return proto.CompactTextString(m) }
func (*PolygonCountTagPointsResponse) ProtoMessage()    {}
func (*PolygonCountTagPointsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58bd33bd76af5b35, []int{15}
}

func (m *PolygonCountTagPointsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolygonCountTagPointsResponse.Unmarshal(m, b)
}
func (m *PolygonCountTagPointsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolygonCountTagPointsResponse.Marshal(b, m, deterministic)
}
func (m *PolygonCountTagPointsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolygonCountTagPointsResponse.Merge(m, src)
}
func (m *PolygonCountTagPointsResponse) XXX_Size() int {
	return xxx_messageInfo_PolygonCountTagPointsResponse.Size(m)
}
func (m *PolygonCountTagPointsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PolygonCountTagPointsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PolygonCountTagPointsResponse proto.InternalMessageInfo

func (m *PolygonCountTagPointsResponse) GetTagPoints() map[string]int64 {
	if m != nil {
		return m.TagPoints
	}
	return nil
}

func init() {
	proto.RegisterType((*Point)(nil), "topos.points.v1.Point")
	proto.RegisterType((*GetPointRequest)(nil), "topos.points.v1.GetPointRequest")
	proto.RegisterType((*SearchPointsRequest)(nil), "topos.points.v1.SearchPointsRequest")
	proto.RegisterType((*SearchPointsResponse)(nil), "topos.points.v1.SearchPointsResponse")
	proto.RegisterType((*PolygonSearchPointsRequest)(nil), "topos.points.v1.PolygonSearchPointsRequest")
	proto.RegisterType((*PolygonSearchPointsResponse)(nil), "topos.points.v1.PolygonSearchPointsResponse")
	proto.RegisterType((*RadiusSearchPointsRequest)(nil), "topos.points.v1.RadiusSearchPointsRequest")
	proto.RegisterType((*RadiusSearchPointsResponse)(nil), "topos.points.v1.RadiusSearchPointsResponse")
	proto.RegisterType((*CountBrandPointsRequest)(nil), "topos.points.v1.CountBrandPointsRequest")
	proto.RegisterType((*CountBrandPointsResponse)(nil), "topos.points.v1.CountBrandPointsResponse")
	proto.RegisterMapType((map[string]int64)(nil), "topos.points.v1.CountBrandPointsResponse.BrandPointsEntry")
	proto.RegisterType((*PolygonCountBrandPointsRequest)(nil), "topos.points.v1.PolygonCountBrandPointsRequest")
	proto.RegisterType((*PolygonCountBrandPointsResponse)(nil), "topos.points.v1.PolygonCountBrandPointsResponse")
	proto.RegisterMapType((map[string]int64)(nil), "topos.points.v1.PolygonCountBrandPointsResponse.BrandPointsEntry")
	proto.RegisterType((*CountTagPointsRequest)(nil), "topos.points.v1.CountTagPointsRequest")
	proto.RegisterType((*CountTagPointsResponse)(nil), "topos.points.v1.CountTagPointsResponse")
	proto.RegisterMapType((map[string]int64)(nil), "topos.points.v1.CountTagPointsResponse.TagPointsEntry")
	proto.RegisterType((*PolygonCountTagPointsRequest)(nil), "topos.points.v1.PolygonCountTagPointsRequest")
	proto.RegisterType((*PolygonCountTagPointsResponse)(nil), "topos.points.v1.PolygonCountTagPointsResponse")
	proto.RegisterMapType((map[string]int64)(nil), "topos.points.v1.PolygonCountTagPointsResponse.TagPointsEntry")
}

func init() { proto.RegisterFile("topos/points/v1/points.proto", fileDescriptor_58bd33bd76af5b35) }

var fileDescriptor_58bd33bd76af5b35 = []byte{
	// 1045 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xd7, 0xc4, 0x89, 0x71, 0x5e, 0x12, 0xc7, 0x99, 0x34, 0xee, 0x66, 0x9d, 0x14, 0x77, 0x68,
	0x8a, 0x49, 0xe8, 0x9a, 0x06, 0x09, 0x21, 0x43, 0x91, 0xd2, 0x28, 0x42, 0x48, 0x15, 0x8a, 0xb6,
	0xe5, 0x82, 0x40, 0xd6, 0xc4, 0x1e, 0x36, 0xab, 0x38, 0x33, 0xc6, 0x3b, 0x8e, 0x70, 0x11, 0x07,
	0xf8, 0x02, 0x1c, 0x7a, 0x41, 0xe2, 0xc8, 0x99, 0x3b, 0x08, 0x89, 0x2b, 0x07, 0x8e, 0xfd, 0x0a,
	0x7c, 0x00, 0x3e, 0x02, 0x9a, 0x3f, 0x6b, 0xaf, 0xbd, 0xeb, 0xd6, 0x11, 0x4d, 0x7b, 0x9b, 0x79,
	0xef, 0xb7, 0x33, 0xbf, 0xf7, 0x9b, 0xf7, 0xde, 0xcc, 0xc2, 0x96, 0x14, 0x5d, 0x11, 0xd5, 0xbb,
	0x22, 0xe4, 0x32, 0xaa, 0x5f, 0xdc, 0xb5, 0x23, 0xaf, 0xdb, 0x13, 0x52, 0xe0, 0x55, 0xed, 0xf5,
	0xac, 0xed, 0xe2, 0xae, 0xbb, 0x15, 0x08, 0x11, 0x74, 0x58, 0x9d, 0x76, 0xc3, 0x3a, 0xe5, 0x5c,
	0x48, 0x2a, 0x43, 0xc1, 0x2d, 0xdc, 0xdd, 0x36, 0x8b, 0x05, 0x4c, 0x9c, 0x33, 0xd9, 0x1b, 0xd4,
	0x19, 0x6f, 0x89, 0x76, 0xc8, 0x03, 0xeb, 0xae, 0x4c, 0xb8, 0x3b, 0x54, 0x76, 0x62, 0x27, 0xf9,
	0x17, 0xc1, 0xc2, 0xb1, 0xda, 0x07, 0x63, 0x98, 0xe7, 0xf4, 0x9c, 0x39, 0xa8, 0x8a, 0x6a, 0x8b,
	0xbe, 0x1e, 0xe3, 0x9b, 0xb0, 0xdc, 0x0e, 0xa3, 0x6e, 0x87, 0x0e, 0x9a, 0xda, 0x37, 0xa7, 0x7d,
	0x4b, 0xd6, 0xf6, 0xa9, 0x82, 0xec, 0x43, 0xa1, 0x23, 0x5a, 0x9a, 0x8f, 0x33, 0x5f, 0x45, 0xb5,
	0xa5, 0xfd, 0xb2, 0x67, 0xe8, 0xc7, 0x1b, 0x7a, 0x0f, 0xa8, 0x7c, 0xc0, 0x03, 0x7f, 0x88, 0xc3,
	0x7b, 0xb0, 0xf6, 0x95, 0xe8, 0x9d, 0x53, 0x29, 0x59, 0xbb, 0x49, 0xdb, 0xed, 0x1e, 0x8b, 0x22,
	0x67, 0x41, 0xaf, 0x5d, 0x1a, 0x3a, 0x0e, 0x8c, 0x1d, 0x5f, 0x83, 0x85, 0x93, 0x1e, 0xe5, 0x6d,
	0xe7, 0x35, 0x0d, 0x30, 0x13, 0xc5, 0x56, 0xd2, 0x20, 0x72, 0x0a, 0xd5, 0x9c, 0x62, 0xab, 0xc6,
	0x78, 0x07, 0x8a, 0xf1, 0x16, 0xcd, 0x96, 0xe8, 0x73, 0xe9, 0x2c, 0x56, 0x51, 0x2d, 0xe7, 0xaf,
	0xc4, 0xd6, 0x43, 0x65, 0x24, 0x3b, 0xb0, 0xfa, 0x31, 0x93, 0x3a, 0x68, 0x9f, 0x7d, 0xdd, 0x67,
	0x51, 0x66, 0xec, 0xe4, 0x09, 0x82, 0xf5, 0x87, 0x8c, 0xf6, 0x5a, 0xa7, 0x1a, 0x1a, 0xc5, 0xd8,
	0x0a, 0x2c, 0x76, 0x69, 0xc0, 0x9a, 0x51, 0xf8, 0xd8, 0x7c, 0xb0, 0xe0, 0x17, 0x94, 0xe1, 0x61,
	0xf8, 0x98, 0xe1, 0x6d, 0x00, 0xed, 0x94, 0xe2, 0x8c, 0x71, 0x2b, 0x97, 0x86, 0x3f, 0x52, 0x86,
	0x51, 0x2c, 0xb9, 0xac, 0x58, 0xe6, 0x13, 0xb1, 0x94, 0x21, 0xdf, 0x63, 0x81, 0x12, 0xd5, 0xe8,
	0x62, 0x67, 0x84, 0xc3, 0xb5, 0x71, 0x52, 0x51, 0x57, 0xf0, 0x88, 0x61, 0x0f, 0xf2, 0x26, 0x5d,
	0x1c, 0x54, 0xcd, 0x25, 0x0e, 0x61, 0x98, 0x43, 0x9e, 0x09, 0xd8, 0xa2, 0xf0, 0x6d, 0x58, 0xe5,
	0xec, 0x1b, 0xd9, 0x4c, 0xb1, 0x5d, 0x51, 0xe6, 0xe3, 0x98, 0xb1, 0xca, 0x0f, 0xf7, 0x58, 0x74,
	0x06, 0x81, 0xe0, 0xaf, 0x4e, 0x8c, 0x23, 0x58, 0x8b, 0x93, 0xa9, 0x19, 0x27, 0xb7, 0xd6, 0xa5,
	0xb8, 0xef, 0x4c, 0x26, 0xdb, 0x91, 0xf5, 0xfb, 0xa5, 0xd8, 0x14, 0x5b, 0x54, 0x7e, 0x0c, 0x97,
	0x69, 0x9d, 0xf6, 0xf9, 0x99, 0xb3, 0x5a, 0x45, 0xb5, 0x65, 0x7f, 0x25, 0xb6, 0x1e, 0x2a, 0x23,
	0xe9, 0x43, 0x25, 0x33, 0xe2, 0x2b, 0x56, 0xfa, 0x6f, 0x04, 0x9b, 0x3e, 0x6d, 0x87, 0xfd, 0xe8,
	0x45, 0x0b, 0x5d, 0x86, 0xbc, 0xd6, 0x36, 0x72, 0x72, 0x5a, 0x54, 0x3b, 0xcb, 0x94, 0xda, 0x83,
	0x7c, 0x8b, 0x71, 0xc9, 0x7a, 0x5a, 0xdf, 0xe9, 0xc5, 0x6c, 0x51, 0x3a, 0x4f, 0x35, 0x69, 0x27,
	0x5f, 0x45, 0x35, 0xe4, 0xdb, 0x19, 0x91, 0xe0, 0x66, 0x05, 0x73, 0xc5, 0x1a, 0x7e, 0x02, 0xd7,
	0x75, 0x8d, 0xdf, 0x57, 0x01, 0x8e, 0x0b, 0x38, 0x2a, 0x28, 0x94, 0x2c, 0xa8, 0x84, 0x38, 0x73,
	0x49, 0x71, 0xc8, 0xef, 0x08, 0x9c, 0xf4, 0x5a, 0x96, 0xff, 0x97, 0xb0, 0xac, 0x61, 0xcd, 0xb1,
	0x28, 0x1a, 0xa9, 0x28, 0xa6, 0x2d, 0xe0, 0x25, 0x6c, 0x47, 0x5c, 0xf6, 0x06, 0xfe, 0xd2, 0xc9,
	0xc8, 0xe2, 0x7e, 0x04, 0xa5, 0x49, 0x00, 0x2e, 0x41, 0xee, 0x8c, 0x0d, 0x2c, 0x79, 0x35, 0x54,
	0xf5, 0x73, 0x41, 0x3b, 0x7d, 0xd3, 0x95, 0x73, 0xbe, 0x99, 0x34, 0xe6, 0xde, 0x47, 0xe4, 0x4f,
	0x04, 0x37, 0x6c, 0x0a, 0xbf, 0x20, 0x39, 0xb2, 0x4b, 0x30, 0x77, 0x55, 0x25, 0xf8, 0x17, 0x82,
	0xd7, 0xa7, 0x06, 0x60, 0xcf, 0xa0, 0x9d, 0x79, 0x06, 0x07, 0x19, 0x99, 0xf4, 0xcc, 0x75, 0xae,
	0xf8, 0x28, 0x0e, 0x61, 0x43, 0xef, 0xfc, 0x88, 0x06, 0xb3, 0x1d, 0x40, 0x5c, 0x94, 0x73, 0xa3,
	0xa2, 0x24, 0xbf, 0x22, 0x28, 0x4f, 0xae, 0x62, 0x55, 0xf8, 0x0c, 0x40, 0xd2, 0x60, 0x5c, 0x83,
	0xf7, 0xb2, 0xf3, 0x30, 0xf5, 0xb1, 0x37, 0xb4, 0x98, 0xc0, 0x17, 0x65, 0x3c, 0x77, 0x3f, 0x84,
	0xe2, 0xb8, 0xf3, 0x52, 0x41, 0xff, 0x86, 0x60, 0x2b, 0x29, 0xfb, 0xff, 0x09, 0xfe, 0x25, 0x67,
	0xde, 0x1f, 0x08, 0xb6, 0xa7, 0x50, 0xb7, 0x8a, 0x7f, 0x91, 0xa1, 0xf8, 0xbd, 0x67, 0x66, 0xdd,
	0x4b, 0x13, 0x7e, 0xff, 0x69, 0x01, 0xf2, 0xe6, 0x5b, 0x4c, 0xa1, 0x10, 0xbf, 0x72, 0x70, 0x35,
	0x45, 0x6f, 0xe2, 0x01, 0xe4, 0x4e, 0x69, 0xc0, 0xa4, 0xf2, 0xc3, 0xd3, 0x7f, 0x9e, 0xcc, 0x6d,
	0xe0, 0x75, 0xf5, 0x46, 0xfd, 0x56, 0xbd, 0x8b, 0xee, 0xd9, 0x37, 0xeb, 0xee, 0x77, 0xf8, 0x02,
	0x96, 0x93, 0xdd, 0x1d, 0xdf, 0x4a, 0x2d, 0x92, 0x71, 0x93, 0xb9, 0x3b, 0xcf, 0x41, 0x19, 0x89,
	0xc8, 0xa6, 0xde, 0x79, 0x1d, 0xaf, 0x8d, 0x5e, 0xc7, 0x8d, 0x48, 0x03, 0xf1, 0x4f, 0x08, 0xd6,
	0x33, 0x6e, 0x68, 0xbc, 0x37, 0xed, 0x14, 0xb2, 0x68, 0xbc, 0x3d, 0x1b, 0xd8, 0xb2, 0xb9, 0xa5,
	0xd9, 0xdc, 0x20, 0x9b, 0x09, 0x36, 0x5d, 0x83, 0x6f, 0x1a, 0x56, 0x0d, 0xb4, 0x5b, 0x43, 0xf8,
	0x47, 0x04, 0x38, 0x7d, 0xef, 0xe1, 0xdd, 0xd4, 0x66, 0x53, 0x6f, 0x7a, 0x77, 0x6f, 0x26, 0xac,
	0xe5, 0x55, 0xd5, 0xbc, 0x5c, 0xec, 0x24, 0x78, 0x99, 0x1b, 0xd8, 0xd2, 0xc2, 0xdf, 0x23, 0x28,
	0x4d, 0xf6, 0x3e, 0x5c, 0x9b, 0xe1, 0xa6, 0x32, 0x6c, 0xde, 0x9a, 0xf9, 0x4e, 0x23, 0x8e, 0xe6,
	0x82, 0x71, 0x49, 0x71, 0x31, 0xd7, 0x46, 0x43, 0x3f, 0xc3, 0xf1, 0x2f, 0x08, 0xae, 0x4f, 0x69,
	0xc3, 0xb8, 0x3e, 0x7b, 0xc3, 0x36, 0x8c, 0xde, 0xb9, 0x6c, 0x87, 0x27, 0x6f, 0x68, 0x62, 0xdb,
	0xc4, 0x49, 0x10, 0x8b, 0x0f, 0x4f, 0x13, 0x34, 0x67, 0x37, 0x80, 0xe2, 0x78, 0xb9, 0xe2, 0xdb,
	0xcf, 0x6d, 0xa4, 0x86, 0xd2, 0x9b, 0x33, 0x36, 0x5c, 0x52, 0xd6, 0x4c, 0x4a, 0xb8, 0xa8, 0x98,
	0xa8, 0xee, 0x66, 0x05, 0xfa, 0x19, 0xc1, 0x46, 0x66, 0xc7, 0xc0, 0x77, 0x66, 0xed, 0x2c, 0x86,
	0x89, 0x77, 0xb9, 0x46, 0x44, 0x6e, 0x6a, 0x42, 0x15, 0x52, 0x1e, 0x12, 0x4a, 0x0b, 0x73, 0xff,
	0xf0, 0xf3, 0x83, 0x20, 0x94, 0xa7, 0xfd, 0x13, 0xaf, 0x25, 0xce, 0xeb, 0x7a, 0x83, 0x3b, 0x34,
	0x8c, 0x07, 0xdd, 0x50, 0xfd, 0x5b, 0x72, 0xfd, 0x3b, 0x59, 0x0f, 0x44, 0x7d, 0xe2, 0xcf, 0xf6,
	0x03, 0x33, 0x3a, 0xc9, 0x6b, 0xc0, 0xbb, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xbf, 0xee,
	0x76, 0xfa, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PointsClient is the client API for Points service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PointsClient interface {
	// Gets a point.
	GetPoint(ctx context.Context, in *GetPointRequest, opts ...grpc.CallOption) (*Point, error)
	// Search points.
	SearchPoints(ctx context.Context, in *SearchPointsRequest, opts ...grpc.CallOption) (*SearchPointsResponse, error)
	// Search points.
	PolygonSearchPoints(ctx context.Context, opts ...grpc.CallOption) (Points_PolygonSearchPointsClient, error)
	// Search points.
	RadiusSearchPoints(ctx context.Context, in *RadiusSearchPointsRequest, opts ...grpc.CallOption) (*RadiusSearchPointsResponse, error)
	CountBrandPoints(ctx context.Context, in *CountBrandPointsRequest, opts ...grpc.CallOption) (*CountBrandPointsResponse, error)
	PolygonCountBrandPoints(ctx context.Context, opts ...grpc.CallOption) (Points_PolygonCountBrandPointsClient, error)
	CountTagPoints(ctx context.Context, in *CountTagPointsRequest, opts ...grpc.CallOption) (*CountTagPointsResponse, error)
	PolygonCountTagPoints(ctx context.Context, opts ...grpc.CallOption) (Points_PolygonCountTagPointsClient, error)
}

type pointsClient struct {
	cc grpc.ClientConnInterface
}

func NewPointsClient(cc grpc.ClientConnInterface) PointsClient {
	return &pointsClient{cc}
}

func (c *pointsClient) GetPoint(ctx context.Context, in *GetPointRequest, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := c.cc.Invoke(ctx, "/topos.points.v1.Points/GetPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) SearchPoints(ctx context.Context, in *SearchPointsRequest, opts ...grpc.CallOption) (*SearchPointsResponse, error) {
	out := new(SearchPointsResponse)
	err := c.cc.Invoke(ctx, "/topos.points.v1.Points/SearchPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) PolygonSearchPoints(ctx context.Context, opts ...grpc.CallOption) (Points_PolygonSearchPointsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Points_serviceDesc.Streams[0], "/topos.points.v1.Points/PolygonSearchPoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &pointsPolygonSearchPointsClient{stream}
	return x, nil
}

type Points_PolygonSearchPointsClient interface {
	Send(*PolygonSearchPointsRequest) error
	CloseAndRecv() (*PolygonSearchPointsResponse, error)
	grpc.ClientStream
}

type pointsPolygonSearchPointsClient struct {
	grpc.ClientStream
}

func (x *pointsPolygonSearchPointsClient) Send(m *PolygonSearchPointsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pointsPolygonSearchPointsClient) CloseAndRecv() (*PolygonSearchPointsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PolygonSearchPointsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pointsClient) RadiusSearchPoints(ctx context.Context, in *RadiusSearchPointsRequest, opts ...grpc.CallOption) (*RadiusSearchPointsResponse, error) {
	out := new(RadiusSearchPointsResponse)
	err := c.cc.Invoke(ctx, "/topos.points.v1.Points/RadiusSearchPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) CountBrandPoints(ctx context.Context, in *CountBrandPointsRequest, opts ...grpc.CallOption) (*CountBrandPointsResponse, error) {
	out := new(CountBrandPointsResponse)
	err := c.cc.Invoke(ctx, "/topos.points.v1.Points/CountBrandPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) PolygonCountBrandPoints(ctx context.Context, opts ...grpc.CallOption) (Points_PolygonCountBrandPointsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Points_serviceDesc.Streams[1], "/topos.points.v1.Points/PolygonCountBrandPoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &pointsPolygonCountBrandPointsClient{stream}
	return x, nil
}

type Points_PolygonCountBrandPointsClient interface {
	Send(*PolygonCountBrandPointsRequest) error
	CloseAndRecv() (*PolygonCountBrandPointsResponse, error)
	grpc.ClientStream
}

type pointsPolygonCountBrandPointsClient struct {
	grpc.ClientStream
}

func (x *pointsPolygonCountBrandPointsClient) Send(m *PolygonCountBrandPointsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pointsPolygonCountBrandPointsClient) CloseAndRecv() (*PolygonCountBrandPointsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PolygonCountBrandPointsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pointsClient) CountTagPoints(ctx context.Context, in *CountTagPointsRequest, opts ...grpc.CallOption) (*CountTagPointsResponse, error) {
	out := new(CountTagPointsResponse)
	err := c.cc.Invoke(ctx, "/topos.points.v1.Points/CountTagPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointsClient) PolygonCountTagPoints(ctx context.Context, opts ...grpc.CallOption) (Points_PolygonCountTagPointsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Points_serviceDesc.Streams[2], "/topos.points.v1.Points/PolygonCountTagPoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &pointsPolygonCountTagPointsClient{stream}
	return x, nil
}

type Points_PolygonCountTagPointsClient interface {
	Send(*PolygonCountTagPointsRequest) error
	CloseAndRecv() (*PolygonCountTagPointsResponse, error)
	grpc.ClientStream
}

type pointsPolygonCountTagPointsClient struct {
	grpc.ClientStream
}

func (x *pointsPolygonCountTagPointsClient) Send(m *PolygonCountTagPointsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pointsPolygonCountTagPointsClient) CloseAndRecv() (*PolygonCountTagPointsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PolygonCountTagPointsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PointsServer is the server API for Points service.
type PointsServer interface {
	// Gets a point.
	GetPoint(context.Context, *GetPointRequest) (*Point, error)
	// Search points.
	SearchPoints(context.Context, *SearchPointsRequest) (*SearchPointsResponse, error)
	// Search points.
	PolygonSearchPoints(Points_PolygonSearchPointsServer) error
	// Search points.
	RadiusSearchPoints(context.Context, *RadiusSearchPointsRequest) (*RadiusSearchPointsResponse, error)
	CountBrandPoints(context.Context, *CountBrandPointsRequest) (*CountBrandPointsResponse, error)
	PolygonCountBrandPoints(Points_PolygonCountBrandPointsServer) error
	CountTagPoints(context.Context, *CountTagPointsRequest) (*CountTagPointsResponse, error)
	PolygonCountTagPoints(Points_PolygonCountTagPointsServer) error
}

// UnimplementedPointsServer can be embedded to have forward compatible implementations.
type UnimplementedPointsServer struct {
}

func (*UnimplementedPointsServer) GetPoint(ctx context.Context, req *GetPointRequest) (*Point, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoint not implemented")
}
func (*UnimplementedPointsServer) SearchPoints(ctx context.Context, req *SearchPointsRequest) (*SearchPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPoints not implemented")
}
func (*UnimplementedPointsServer) PolygonSearchPoints(srv Points_PolygonSearchPointsServer) error {
	return status.Errorf(codes.Unimplemented, "method PolygonSearchPoints not implemented")
}
func (*UnimplementedPointsServer) RadiusSearchPoints(ctx context.Context, req *RadiusSearchPointsRequest) (*RadiusSearchPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RadiusSearchPoints not implemented")
}
func (*UnimplementedPointsServer) CountBrandPoints(ctx context.Context, req *CountBrandPointsRequest) (*CountBrandPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBrandPoints not implemented")
}
func (*UnimplementedPointsServer) PolygonCountBrandPoints(srv Points_PolygonCountBrandPointsServer) error {
	return status.Errorf(codes.Unimplemented, "method PolygonCountBrandPoints not implemented")
}
func (*UnimplementedPointsServer) CountTagPoints(ctx context.Context, req *CountTagPointsRequest) (*CountTagPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTagPoints not implemented")
}
func (*UnimplementedPointsServer) PolygonCountTagPoints(srv Points_PolygonCountTagPointsServer) error {
	return status.Errorf(codes.Unimplemented, "method PolygonCountTagPoints not implemented")
}

func RegisterPointsServer(s *grpc.Server, srv PointsServer) {
	s.RegisterService(&_Points_serviceDesc, srv)
}

func _Points_GetPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).GetPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topos.points.v1.Points/GetPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).GetPoint(ctx, req.(*GetPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_SearchPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).SearchPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topos.points.v1.Points/SearchPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).SearchPoints(ctx, req.(*SearchPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_PolygonSearchPoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PointsServer).PolygonSearchPoints(&pointsPolygonSearchPointsServer{stream})
}

type Points_PolygonSearchPointsServer interface {
	SendAndClose(*PolygonSearchPointsResponse) error
	Recv() (*PolygonSearchPointsRequest, error)
	grpc.ServerStream
}

type pointsPolygonSearchPointsServer struct {
	grpc.ServerStream
}

func (x *pointsPolygonSearchPointsServer) SendAndClose(m *PolygonSearchPointsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pointsPolygonSearchPointsServer) Recv() (*PolygonSearchPointsRequest, error) {
	m := new(PolygonSearchPointsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Points_RadiusSearchPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RadiusSearchPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).RadiusSearchPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topos.points.v1.Points/RadiusSearchPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).RadiusSearchPoints(ctx, req.(*RadiusSearchPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_CountBrandPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBrandPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).CountBrandPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topos.points.v1.Points/CountBrandPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).CountBrandPoints(ctx, req.(*CountBrandPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_PolygonCountBrandPoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PointsServer).PolygonCountBrandPoints(&pointsPolygonCountBrandPointsServer{stream})
}

type Points_PolygonCountBrandPointsServer interface {
	SendAndClose(*PolygonCountBrandPointsResponse) error
	Recv() (*PolygonCountBrandPointsRequest, error)
	grpc.ServerStream
}

type pointsPolygonCountBrandPointsServer struct {
	grpc.ServerStream
}

func (x *pointsPolygonCountBrandPointsServer) SendAndClose(m *PolygonCountBrandPointsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pointsPolygonCountBrandPointsServer) Recv() (*PolygonCountBrandPointsRequest, error) {
	m := new(PolygonCountBrandPointsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Points_CountTagPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountTagPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointsServer).CountTagPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topos.points.v1.Points/CountTagPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointsServer).CountTagPoints(ctx, req.(*CountTagPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Points_PolygonCountTagPoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PointsServer).PolygonCountTagPoints(&pointsPolygonCountTagPointsServer{stream})
}

type Points_PolygonCountTagPointsServer interface {
	SendAndClose(*PolygonCountTagPointsResponse) error
	Recv() (*PolygonCountTagPointsRequest, error)
	grpc.ServerStream
}

type pointsPolygonCountTagPointsServer struct {
	grpc.ServerStream
}

func (x *pointsPolygonCountTagPointsServer) SendAndClose(m *PolygonCountTagPointsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pointsPolygonCountTagPointsServer) Recv() (*PolygonCountTagPointsRequest, error) {
	m := new(PolygonCountTagPointsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Points_serviceDesc = grpc.ServiceDesc{
	ServiceName: "topos.points.v1.Points",
	HandlerType: (*PointsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPoint",
			Handler:    _Points_GetPoint_Handler,
		},
		{
			MethodName: "SearchPoints",
			Handler:    _Points_SearchPoints_Handler,
		},
		{
			MethodName: "RadiusSearchPoints",
			Handler:    _Points_RadiusSearchPoints_Handler,
		},
		{
			MethodName: "CountBrandPoints",
			Handler:    _Points_CountBrandPoints_Handler,
		},
		{
			MethodName: "CountTagPoints",
			Handler:    _Points_CountTagPoints_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PolygonSearchPoints",
			Handler:       _Points_PolygonSearchPoints_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PolygonCountBrandPoints",
			Handler:       _Points_PolygonCountBrandPoints_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PolygonCountTagPoints",
			Handler:       _Points_PolygonCountTagPoints_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "topos/points/v1/points.proto",
}
